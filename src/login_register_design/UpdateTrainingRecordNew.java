/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package login_register_design;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListModel;

/**
 *
 * @author Yusuf
 */
public class UpdateTrainingRecordNew extends javax.swing.JFrame {

    /**
     * Creates new form UpdateTrainingRecordNew
     */
    public UpdateTrainingRecordNew() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        scpTrainees = new javax.swing.JScrollPane();
        listTrainees = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbProgram = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lbTrainerID = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cbRecStatus = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(102, 0, 51));
        jPanel2.setForeground(new java.awt.Color(102, 0, 51));

        jPanel1.setBackground(new java.awt.Color(220, 0, 127));

        btnExit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        listTrainees.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listTrainees.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTraineesMouseClicked(evt);
            }
        });
        scpTrainees.setViewportView(listTrainees);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TRAINEES");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Update Training Record");

        lbProgram.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbProgram.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Program  ID  :");

        lbTrainerID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbTrainerID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("Trainer ID     :");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Record Status    :");

        cbRecStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbRecStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ongoing", "Completed" }));
        cbRecStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbRecStatusItemStateChanged(evt);
            }
        });
        cbRecStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRecStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbProgram, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTrainerID, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(scpTrainees, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbRecStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 91, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExit)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTrainerID, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbProgram, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbRecStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scpTrainees, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(btnExit)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        setVisible(false);
        new GUI_Trainer().setVisible(true);
    }//GEN-LAST:event_btnExitActionPerformed

    private void listTraineesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTraineesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_listTraineesMouseClicked

    private void cbRecStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRecStatusActionPerformed

    }//GEN-LAST:event_cbRecStatusActionPerformed

    private void cbRecStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbRecStatusItemStateChanged
        // TODO add your handling code here:
        if (listTrainees.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a trainee");
            this.setVisible(false);
            this.setVisible(true);
        } else {
            if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                var item = cbRecStatus.getSelectedItem();
                String traineeSelected = listTrainees.getSelectedValue();
                if (item == "Completed") {
                    //Update Database
                    var trainee = GetTraineeByName(traineeSelected);
                    UpdateTrainingStatus(trainee.id);
                }
            } else if (evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
                JOptionPane.showMessageDialog(null, "Training Record Updated Successfully!");

            }
        }

    }//GEN-LAST:event_cbRecStatusItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        int programID = getProgramIDByTrainerID(User._LoginUser.id);
        var list = GetAllTrainingRecordByProgramID(programID);
        var listModel = new DefaultListModel();
        for (int i = 0; i < list.size(); i++) {
            listModel.add(i, list.get(i));
        }

        listTrainees.setModel(listModel);

        String databaseURL = "jdbc:derby://localhost:1527/TMS";
        try ( Connection conn = DriverManager.getConnection(databaseURL, "root", "123123")) {
            Statement sta = conn.createStatement();
            int programIDToShow = 0;
            int trainerIDToShow = 0;

            if (conn != null) {
                String sql = "SELECT PROGRAM_ID, TRAINER_ID FROM TRAINER_TRAINING_PROGRAM WHERE TRAINER_ID = " + User._LoginUser.id;
                ResultSet rs = sta.executeQuery(sql);
                while (rs.next()) {
                    programIDToShow = rs.getInt("PROGRAM_ID");
                    trainerIDToShow = rs.getInt("TRAINER_ID");
                }

                lbTrainerID.setText(String.valueOf(trainerIDToShow));
                lbProgram.setText(String.valueOf(programIDToShow));

                sta.close();
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateTrainingRecordNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateTrainingRecordNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateTrainingRecordNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateTrainingRecordNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateTrainingRecordNew().setVisible(true);
            }
        });
    }

    public void UpdateTrainingStatus(int traineeSelectedId) {

        String databaseURL = "jdbc:derby://localhost:1527/TMS";
        try ( Connection conn = DriverManager.getConnection(databaseURL, "root", "123123")) {
            Statement sta = conn.createStatement();

            if (conn != null) {
                String sql = "UPDATE TRAINING_RECORD "
                        + "SET RECORD_STATUS = 'Completed' WHERE TRAINEE_ID = " + traineeSelectedId;

                sta.executeUpdate(sql);
                sta.close();
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        }

        try ( Connection conn = DriverManager.getConnection(databaseURL, "root", "123123")) {
            Statement sta = conn.createStatement();
            var programID = 0;

            if (conn != null) {
                String sql = "SELECT PROGRAM_ID FROM TRAINER_TRAINING_PROGRAM WHERE TRAINER_ID = " + User._LoginUser.id;
                ResultSet rs = sta.executeQuery(sql);
                while (rs.next()) {
                    programID = rs.getInt("PROGRAM_ID");
                }
                String sql2 = "INSERT INTO FEEDBACK(FEEDBACK_RATING, FEEDBACK_DESCRIPTION,TRAINEE_ID,TRAINER_ID,PROGRAM_ID) VALUES(NULL, NULL, "
                        + traineeSelectedId + ", " + User._LoginUser.id + ", " + programID + " )";

                sta.executeUpdate(sql2);
                sta.close();
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public User GetTraineeByName(String traineeName) {
        String databaseURL = "jdbc:derby://localhost:1527/TMS";
        try ( Connection conn = DriverManager.getConnection(databaseURL, "root", "123123")) {
            Statement sta = conn.createStatement();

            if (conn != null) {
                ResultSet res = sta.executeQuery("Select * from  ROOT.TRAINEE where TRAINEE_NAME = '" + traineeName + "'");

                if (res != null) {
                    while (res.next()) {
                        User user = new User();
                        user.id = res.getInt("TRAINEE_ID");
                        user.userName = res.getString("TRAINEE_NAME");
                        user.userPassword = res.getString("TRAINEE_PASS");
                        user.userRole = "Trainee";
                        res.close();
                        sta.close();
                        conn.close();
                        return user;
                    }
                }

                res.close();
                sta.close();
                conn.close();
                return null;
            }
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
        return null;
    }

    public List<String> GetAllTrainingRecordByProgramID(int id) {
        String databaseURL = "jdbc:derby://localhost:1527/TMS";
        List<String> list = new ArrayList<String>();
        try ( Connection conn = DriverManager.getConnection(databaseURL, "root", "123123")) {
            Statement sta = conn.createStatement();

            if (conn != null) {
                ResultSet res = sta.executeQuery(
                        "SELECT ROOT.TRAINEE.TRAINEE_NAME \n"
                        + "FROM ROOT.TRAINING_RECORD \n"
                        + "LEFT JOIN ROOT.TRAINEE \n"
                        + "ON ROOT.TRAINING_RECORD.TRAINEE_ID = ROOT.TRAINEE.TRAINEE_ID \n"
                        + "WHERE ROOT.TRAINING_RECORD.PROGRAM_ID = " + id);

                if (res != null) {
                    while (res.next()) {
                        String name = res.getString("TRAINEE_NAME");
                        list.add(name);
                    }
                    res.close();
                    sta.close();
                    conn.close();
                    return list;
                }

                res.close();
                sta.close();
                conn.close();
                return null;
            }
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
        return null;
    }

    public int getProgramIDByTrainerID(int id) {
        String databaseURL = "jdbc:derby://localhost:1527/TMS";
        try ( Connection conn = DriverManager.getConnection(databaseURL, "root", "123123")) {
            Statement sta = conn.createStatement();

            if (conn != null) {
                ResultSet res = sta.executeQuery("Select ROOT.TRAINING_PROGRAM.PROGRAM_ID \n"
                        + "FROM ROOT.TRAINING_PROGRAM \n"
                        + "LEFT JOIN ROOT.TRAINER_TRAINING_PROGRAM \n"
                        + "ON ROOT.TRAINER_TRAINING_PROGRAM.PROGRAM_ID = ROOT.TRAINING_PROGRAM.PROGRAM_ID \n"
                        + "WHERE ROOT.TRAINER_TRAINING_PROGRAM.TRAINER_ID = " + id);

                if (res != null) {
                    while (res.next()) {
                        int programID = res.getInt("PROGRAM_ID");
                        res.close();
                        sta.close();
                        conn.close();
                        return programID;
                    }
                }

                res.close();
                sta.close();
                conn.close();
                return 0;
            }
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
            return 0;
        }
        return 0;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JComboBox<String> cbRecStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbProgram;
    private javax.swing.JLabel lbTrainerID;
    private javax.swing.JList<String> listTrainees;
    private javax.swing.JScrollPane scpTrainees;
    // End of variables declaration//GEN-END:variables
}
